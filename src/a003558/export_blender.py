import os
from typing import Dict, Tuple, Iterable

def _write_obj(path: str, vertices: Iterable[Tuple[float, float, float]], faces: Iterable[Tuple[int, ...]]):
    """
    Schrijf een minimaal .obj-bestand met v- en f-regels.
    faces gebruikt 1-based indices (zoals OBJ).
    """
    with open(path, "w", encoding="utf-8") as f:
        f.write("# minimal OBJ generated by a003558.export_blender\n")
        for x, y, z in vertices:
            f.write(f"v {x:.6f} {y:.6f} {z:.6f}\n")
        for face in faces:
            f.write("f " + " ".join(str(i) for i in face) + "\n")


def export_octa_cube_obj(out_dir: str, basename: str = "scene", *, scale: float = 1.0) -> Dict[str, str]:
    """
    Exporteer twee OBJ's naar out_dir:
      - {basename}_octahedron.obj
      - {basename}_cube.obj

    Returns:
      dict(octahedron=..., cube=...)
    """
    os.makedirs(out_dir, exist_ok=True)

    # --------- Octahedron (6 vertices, 8 triangular faces) ----------
    ov = [
        ( 1,  0,  0),
        (-1,  0,  0),
        ( 0,  1,  0),
        ( 0, -1,  0),
        ( 0,  0,  1),
        ( 0,  0, -1),
    ]
    ov = [(scale*x, scale*y, scale*z) for (x,y,z) in ov]

    # 1-based indexing:
    ofaces = [
        (1, 3, 5), (3, 2, 5), (2, 4, 5), (4, 1, 5),  # “top” naar +z
        (3, 1, 6), (2, 3, 6), (4, 2, 6), (1, 4, 6),  # “bottom” naar -z
    ]

    octa_path = os.path.join(out_dir, f"{basename}_octahedron.obj")
    _write_obj(octa_path, ov, ofaces)

    # ------------- Cube (8 vertices, 6 quad faces) ------------------
    cv = [
        (-1, -1, -1),  # 1
        ( 1, -1, -1),  # 2
        ( 1,  1, -1),  # 3
        (-1,  1, -1),  # 4
        (-1, -1,  1),  # 5
        ( 1, -1,  1),  # 6
        ( 1,  1,  1),  # 7
        (-1,  1,  1),  # 8
    ]
    cv = [(scale*x, scale*y, scale*z) for (x,y,z) in cv]

    cfaces = [
        (1, 2, 3, 4),  # bottom z=-1
        (5, 6, 7, 8),  # top    z=+1
        (1, 2, 6, 5),  # front  y=-1
        (4, 3, 7, 8),  # back   y=+1
        (1, 5, 8, 4),  # left   x=-1
        (2, 3, 7, 6),  # right  x=+1
    ]

    cube_path = os.path.join(out_dir, f"{basename}_cube.obj")
    _write_obj(cube_path, cv, cfaces)

    return {"octahedron": octa_path, "cube": cube_path}
